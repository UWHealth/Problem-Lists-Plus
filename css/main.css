@charset "UTF-8";
/* SG
# Imports [[dev]]

@priority 1
@file main.scss

Sass files are imported in order from lowest specificity to highest.
1. `/tools`
  * Functions
  * Settings
  * System variables and defaults
  * General-use mixins and sass utilities
2. `base/generic`
  * Normalize/reset styles (unclassed)
3. `/base`
  * Element styles (unclassed)
4. `/layout`
  * Basic layout and object styles (single-class)
5. `/components`
  * Module and component styles (single- and child-classes)
6. `/sections`
  * View- and page-specific and scoped styles (typically `parent > child` classes).
7. `/overrides`
  * Utility styles, usually end in `!important`.

*/
/* SG
# Functions/General [[dev]]

@file globals/_gl-functions.scss

##### `cache()`
###### function(`$function-name, $args...`)
Memoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).

_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._

@returns function result

*/
/* SG
# Functions/Conversion [[dev]]

@file globals/_gl-functions.scss

##### `strip-units()`
###### function(`$value`)
Remove px,em,rem, etc. from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible (px * rem for instance) units.
[Reference](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass)

##### `percentage-to-decimal()`
###### function(`$percentage`)
Changes percent value to decimal.
@returns number

##### `px-to-vw()`
###### function(`$pixels`)
Converts pixel dimensions to viewport width (vw) dimensions.
@returns number (vw)

##### `px-to-rems()`
###### function(`$pixels, $base-font:` `$$base-font-size`)
Function for calculating `rem` values. Used by `@px-to-rems()`. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).
@returns number (rems)
@alias rems()

##### `px-to-ems()`
###### function(`$pixels, $context:` `$base-font-size`)
Function for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.
@returns number(ems)
@alias ems()

##### `list-to-string()`
###### function(`$list, $separator:','`)
Converts a list to a string with an optional separator.
@returns string
@alias str-join()

##### `str-to-number()`
###### function(`$string, $unitless: false`)
Converts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `"10px"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.
@returns number
*/
/* SG
# Functions/Strings & Lists [[dev]]

@file globals/_gl-functions.scss

[Reference](https://github.com/devatrox/Sunglass)

##### `contains()`
###### function(`$data, $value`)
Generic `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.
@returns boolean
@requires `str-contains()`, `list-contains()`

##### `str-join()`
###### function(`$list, $separator:','`)
Converts a map or list to a string (`('this', 'and', 'this')` becomes `'this,and,this'`).
@returns string

##### `str-contains()`
###### function(`$string, $value, $pos: 0`)
Checks if a `$string` contains a `$value`. Optionally accepts a start positon.
@returns boolean

##### `str-append()`
###### function(`$data, $separator:','`)
Adds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`).
@returns string

##### `list-contains()`
###### function(`$list, $value`)
Checks whether a `$list` contains a `$value`.
@returns boolean

##### `list-print()`
###### function(`$list, $depth: 1`)
Used to turn a list into a flat string. For debug purposes.
@returns string

##### `to-list()`
###### function(`$string, $keep: 'both'`)
Convert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.
@returns list

*/
/* SG
# Functions/Maps [[dev]]

@file globals/_gl-functions.scss

[Reference](http://www.sitepoint.com/extra-map-functions-sass/)

##### `map-deep-set()`
###### function(`$map, $keys... [, $value]`)
Add to a deeply nested map key. Accepts any number of keys, but the final value is the new key.
@returns map

##### `map-depth()`
###### function(`$map`)
Find depth of a `$map`.
@returns number

##### `map-has-keys()`
###### `[map], [key(s) to be checked ...]`
Determine whether a map contains certain keys.
@returns boolean
@alias map-contains-keys()

##### `map-has-nested-keys()`
###### function(`$map`, `$keys...`)
Check for the value of a nested key.
@returns boolean
@alias map-contains-nested-keys()

##### `map-get-nested()`
###### function(`$map`, `$keys...`)
Returns nested map values. A deep version of Sass' `map-get()`.
@returns string, boolean, list, or map

##### `map-extend()`
###### function(`$map`, `$maps...`(`$deep:true`))
Merges multiple maps. Similar to jQuery's .extend().
@returns map

##### `map-add-depth()`
###### function(`$map`, `$new-key:'base'`)
Adds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )
@returns map

##### `map-print()`
###### function(`$map`, `$level:1`)
Prints map into a string (in a JSON-esque format). Useful for debugging.
@returns string
@alias map-inspect()

*/
/* SG
# Functions/Typography [[dev]]

@file globals/_gl-functions.scss

##### `modular-scale()`
###### function(`$scale`, `$ratio:``$$scale-ratio`)
Generates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$$scale-ratio` value).
@requires `pow()`, `cache()`, `strip-units()`
@returns number (pixels)

*/
/* SG
# Functions/Typography [[dev]]

##### `baseline()`
###### function(`$font-size`, `$baseline`, `$multiple:1`)
Aligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).
@returns number (unitless)


##### `baseline-curve()`
###### function(`$x` , `$accel`: `1`)
Calculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`. An `$accel` of 1 is a smooth arc.
@returns number
@requires `sqrt()`, `pow()`


##### `baseline-calc()`
###### function(`$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness`)
Creates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.
Uses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.
Depends on `baseline()` for calculation and `baseline-curve()` to determine the deviance from the upper and lower constraints.

@returns number (unitless)
@requires `baseline()`, `baseline-curve()`

*/
/* SG
# Functions/Typography [[dev]]

@file globals/_gl-functions.scss

##### `type-space()`
###### function(`$multiplier`: `1`)
Multiplies a value by the `$$base-line-height`.

##### `get-type()`, `type()`
###### `[font-size],[font-size-value]`
function for finding the value of an indexed type-size. H1-H6, p, and small are all indexed values. px, rem, and line-height are available.

##### `define-type()`
###### `[font-size], [property], [new value]`
Registers new values to type map. [Property] accepts px, rem, and line-height.

*/
/* SG
# Functions/Math [[dev]]

@file globals/_gl-functions.scss

Most functions taken from [Sassy Math](https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss).

---

##### `pow()`
###### function(`$number`, `$exponent`, `$precision:12`)
A more robust exponent multiplication which allows for decimal-based exponents. This **fully** replaces Compass' pow() function (allows for float-based exponents).
@returns number
@requires log()
@alias exponent()

##### `frexp()`
###### function(`$x`)
Returns a two-element list containing the normalized fraction and exponent of number.
@returns list (fraction, exponent)


##### `gcd()`
###### function(`$number-1`, `$number-2`)
Greatest Common Divisor calculation (useful for calculating grids and widths).
@returns number

##### `lcm()`
###### function(`$a`, `$b`)
Finds the least common multiple.
@returns number

##### `nth_root()`
###### function(`$base`, `$n:2`, `$precision:12`)
Advanced calculation for square roots, cube roots, etc. of a value.
@returns number

##### `sqrt()`
###### function(`$base`, `$precision:12`)
Find the square root of a value.
@returns number

##### `golden()`
###### function(`$base: 1`)
Get the golden ratio from `$base`.
@returns number

##### `sin()`
###### function(`$angle`)
Determines the Sine of an angle.
@returns number

##### `cos()`
###### function(`$angle`)
Determines the Cosine of an angle.
@returns number

##### `tan()`
###### function(`$angle`)
Determines the Tangent of an angle.
@returns number

*/
/* SG
# Colors/Lookup [[dev]]

@file tools/_t-color-functions.scss

@priority 99

##### `colors()`
###### function(`$color-name, $tone: 'base', $opacity: 1`)
Get a color value from the global `$$base-colors` map. Darker and lighter tones are available by passing a second string.

```scss
.foo {
    background-color: colors(links, light));
}
```

Passing only a color name will default to the 'base' color.

@alias color()
@requires `$$base-colors`

[Reference](http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/)
*/
/* SG
# Colors/Lookup [[dev]]

##### `combine-color-maps()`
###### function(`$map1 , $map2`)
Specialized function used by `generate-color-variations()` to merge two color maps.

@returns map

*/
/* SG
# Colors/Manipulation [[dev]]

@file tools/_t-color-functions.scss

##### `generate-color-varations()`
###### function( `$map: $colors, $functions: (tint, tint, tint, shade, shade, shade), $increments: (20%, 40%, 80%, 20%, 40%, 80%), $variations: (light, lighter, lightest, dark, darker, darkest), $blending-colors: null`)

Takes base color values and generates a full color palette. Used by the `$$base-colors` map to create a project's palette, accessible via `colors()`.

**Arguments:**
* `$map`: Color map you want to create variations of. Defaults to `$$base-colors`.
* `$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend` function, provided `$blending-colors` are provided.
* `$increments`: percentage amount to apply `$function` to each `$variations`.
* `$variations`: actual names for each color tone when `colors()` used.
* `$blending-colors`: used when a function is a `blend`. Can be a list or a single color.

@requires `combine-color-maps()`

*/
/* SG
# Colors/Manipulation [[dev]]


##### `black-or-white()`
###### function(`$color`)
Change text color based on background-color's darkness.

```scss
div {
    background-color: #f8cd12;
    color: set_text_color(#f8cd12);
}
// Your text color would be black because #f8cd12 and #00000 have more contrast.
```
@alias set-text-color()
@requires `color-luminance`


##### `pick-best-color()`
###### function(`$base, $colors, $tolerance: 0`)
Compares a set of colors against `$base` and returns the color with the most contrast. `$colors` should be a list.
[Taken from here](https://gist.github.com/voxpelli/6304812)

```scss
div {
    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));
}
// The function would test the colors and find that #2c2c2c is the best.
```
@requires `color-contrast()`, `color-luminance()`
@returns color


##### `color-contrast()`
###### function(`$color1, $color2`)
Find contrast between two colors.
[Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)
@requires `color-luminance()`
@returns number(0 - 1)


##### `color-luminance()`
###### function(`$color1`)
Find the relative luminance of a color. Used by `color-contrast()`.
[Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)
@alias luma()
@returns number(0 - 1)

*/
/* SG
# Colors/Debugging [[dev]]

@file tools/_t-color-functions.scss

##### `@color-palette-output()`
###### mixin(`$selector`, `$color-map:` `$$base-colors`)
Debugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for "color blocks" output, in style guide.

@requires `map-add-depth()`, `black-or-white()`

*/
/* SG

# Colors/Blending Modes [[dev]]

@file tools/_t-blend-modes.scss

@priority 2

[Taken from Sass Blend Modes](https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss)

##### `blend-normal()`
###### function(`$forground, $background, $amount:0`)

##### `blend-multiply()`
###### function(`$forground, $background, $amount:0`)

##### `blend-lighten()`
###### function(`$forground, $background, $amount:0`)

##### `blend-darken()`
###### function(`$forground, $background, $amount:0`)

##### `blend-lineardodge()`
###### function(`$forground, $background, $amount:0`)

##### `blend-linearburn()`
###### function(`$forground, $background, $amount:0`)

##### `blend-difference`
###### function(`$forground, $background, $amount:0`)

##### `blend-screen()`
###### function(`$forground, $background, $amount:0`)

##### `blend-exclusion()`
###### function(`$forground, $background, $amount:0`)

##### `blend-multiply()`
###### function(`$forground, $background, $amount:0`)

*/
/* SG
# Variables/Easing [[dev]]

@file globals/tools/_t-easings.scss

Each easing variable is a cubic-bezier value that specifies rate of change of an animation. [See easings for more](http://www.easings.net).

[Reference](https://github.com/matthewlein/Ceaser/blob/master/developer/)

*/
/* SG
# Config/Typography Settings [[dev]]

##### `$$base-font-size`
###### Pixel value
Font size all other values will use for calculation. Will be converted to `rems`.

##### `$$base-line-height`
###### Pixel value
Line-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.

##### `$$font-looseness`
###### Percentage
What to base the tightness/looseness of automatically-generated `line-heights`.

##### `$$auto-scale-type`
###### Boolean
Uses `$$scale-ratio` to create font sizes for headings starting from the `$$base-font-size`. Overwrites `$$type-[h#]-size`.

##### `$$scale-ratio`
###### Numeric (float)
Used for `$$auto-scale-type` and for `modular-scale()`.

##### `$$rem-px-fallback`
###### Boolean
Determines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.

##### `$$indented-paragraphs`
###### Boolean
Determines whether to generate css for paragraphs with a text indent, rather than paragraphs with margins between them.

*/
/* SG
# Config/Typography Settings [[dev]]

##### `$$type-[h#]-size`
###### List (pixel value [, pixel or unitless value])
Variables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.

_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._
*/
/* SG
# Config/Typography Settings [[dev]]

##### `$$primary-font-stack`, `$$secondary-font-stack`, `$$monospace-font-stack`, `$$icon-font-stack`
###### String
Used wherever font-families are declared. Use `null` if nothing exists.

##### `$$use-web-fonts`
###### Boolean
Whether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).

##### `$$font-file-name`
###### List (string)
Uses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._

##### `$$font-weights`
###### List (nested)
Each parenthesis corresponds to each name in `$$font-file-name`. Determines how many `@font-face` weights are generated per font.

##### `$$font-italics`
###### List (nested) (boolean)
Corresponds to each value in `$$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true),(false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).

##### `$$font-include-woff2`
###### Boolean (list)
Determines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).

##### `$$font-include-eot`
###### Boolean (list)
Determines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.

*/
/* SG
# Config/Grid Settings [[dev]]

##### `$$max-site-width`
###### Pixel value
Maximum desktop width for the site wrapper.

##### `$$grid-columns`
###### Number
Base number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).

##### `$$grid-gutter`
###### Pixel value
Space between grid items. Also used in `type-space()` for horizontal spacing units.

##### `$$grid-silent-classes`
###### Boolean
If set to false, actual grid classes will be output to CSS.

##### `$$grid-push`, `$$grid-pull`
###### Boolean
Determines whether to include extra grid classes for positional grid modifiers.

##### `$$grid-markup-fix`
###### Boolean
If set to `true`, html must have no white space (or comments) between grid items. Almost always set to `false`.

##### `$$grid-floats`
###### Boolean
If set to `true`, the grid uses floats instead of inline-block for layout.

##### `$$breakpoints-has-widths`, `$$breakpoints-has-push`, `$$breakpoints-has-pull`
###### List (string)
Determines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.

*/
/* SG
# Config/General Settings [[dev]]

##### `$$breakpoints`
###### Map (`breakpoint-name: 'breakpoint-value'`)
Sets up variables for media-queries. Used in `@media-query()`.

**Example**
```scss
$breakpoints: (
  'small':'(min-width: 320px)',
  'bigs':'(min-width: 850px)'
);
```
*/
/* SG
# Config/General Settings [[dev]]

##### `$$display-classes`
###### Map (string: string)
Variable used to generate display classes. Key value pairs determine the class name and the display value.

**Example**
```scss
//SCSS input
$display-classes: ('show':'block');

//CSS output
.show { display: block; }
```


##### `$$spacing-classes`
###### Map (`string: string`)
Variable used to generate spacing classes. Classes are created via `@spacing-utilities()`. Classes are named in the format of `.prefix_direction_amount`.

**Keys and Values**
* 'directions': Direction class suffixes
* 'amounts': Numeric value multiples (e.g. `2` or `-1`)
* 'names': Amount names
* 'prefixes': Prefixes for class names (for margins or padding)

**Example**
```scss
//SCSS Input
$display-classes: (
	'directions': ('t', 'r'),
	'amounts': (2, -1),
	'names': ('2', 'neg'),
	'prefixes': ('space','pad')
);

//CSS output
.space_t_2 { margin-top: 2rem; }
.space_r_2 { margin-right: 2rem; }
.space_t_neg { margin-top: -1rem; }
.space_r_neg { margin-right: -1rem; }
.pad_t_2 { padding-top: 2rem; }
.pad_r_2 { padding-right: 2rem; }
//No .pad_t/r_neg classes since negative padding is invalid

@media only screen and (min-width:300px){...}
//repeated for all media-queries defined by $breakpoints-has-spacing-classes...

```
*/
/* SG
# Config/General Settings [[dev]]

@file _config.scss

##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`
###### List (keys from `$$breakpoints`)
Determines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.
A `false` value will output no classes of that type.

*/
/* SG
# Config/Color Settings [[dev]]

##### `$$base-colors`
###### Map (key : color value)
Sets up consistent color names to be used for color-palette. Dark and light values will be automatically generated. Key values should be accessed through `colors()`.
`type`, `links`, and `bg` key values are required for some starter styles. If you choose not to use them, just replace their references in the appropriate files.

Supports a nested map style like the following:
```scss
$base-colors: (
  'type':(
    'base':red,
    'light': pink,
    'dark':maroon
  ),
  'links':(
    'base':blue,
    'light': sky,
    'dark': navy
  ),
  'bg': (
    'base': #fff,
    'dark': #ddd
  )
);

```
*/
/* SG
# Config/Debug Settings [[dev]]

@file _config.scss

_NOTE: These settings, when set to `true`, will slow down compilation somewhat._

##### `$$debug-fonts`
###### Boolean
Whether to include debug statements about fonts and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.

* %: Distance from the lowest font-size.
* ub: Line-height upperbounds
* lb: Line-height lowerbounds
* lh: Final line-height (in pixels and unit-less).
* loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.


##### `$$debug-silent-classes`
###### Boolean
Stores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.


##### `$$debug-baseline`
###### Boolean
Adds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.

*/
/* SG
# Variables/System [[dev]]

@file /tools/_t-variables.scss

-------------------------------------------

Default settings for variables.

##### `$$h[#]-lh`
###### boolean/unitless/pixel value
Parses `$$type-h[#]-size` for an optional line-height value, if none exists, just set to `true`. This value will be passed to `@type-font-size()`.


##### `$$type-base-unit`
###### Number
Abstraction of the base spacing unit used in any mixin or function that defines spacing units.

##### `$$type-base-ratio`
###### Number
Ratio used to calculate the difference between font sizes and spacing units.


##### `$$type-headings`
###### List (number)
Used for defining automatic headings functions.

##### `$$type-modular-scale`
###### Number
Abstracts the `$$scale-ratio` and makes sure it's a positive number.


##### `$$all-breakpoints`
###### List
Stores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.


##### `$$breakpoint-smallest`
###### String
Grabs the first `$$breakpoints` name.


##### `$$breakpoint-largest`
###### String
Grabs the last `$$breakpoints` name.

##### `$$colors-list`
###### List (string)
The names of all colors in the `$$colors` map.

*/
/* SG
# Tools/Font Face Generator [[dev]]

@file globals/tools/_t-fontface.scss

##### `@fonts()`
###### mixin(`$name`: `$$font-file-name`, `$path: $$font-file-location`, `$weights`: `$$font-weights`, `$italics`: `$$font-italics`)
A wrapper function for `@font-face()`. Takes global configuration variables and passes them to `@font-face()`. Loops through each `$name` based on `$weights` and `$italics`. Uses `$path` and `$name` to point to font files. Formats these variables so they can be passed to `@font-face()`.

Font file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial400.ttf and the CSS value would be font-family: 'arial'; font-weight: 400.

@requires `@font-face()`

##### `@font-face()`
###### mixin(`$name`, `$font-files`, `$weight:false`,` $style:false`, `$eot:false`)
Generates cross-browser font-face declarations when called.
$name is required, arbitrary, and what you will use in font stacks.
**Arguments:**
* $font-files is required using font-files('relative/location', 'format'). For best results use this order: woff, opentype/truetype, svg
* $eot is required by IE, and is a relative location of the eot file.
* $weight shows if the font is bold, defaults to normal
* $style defaults to normal, might be also italic

Based on [Compass' font-face mixin](http://compass-style.org/reference/compass/css3/font_face/).

*/
@font-face {
  font-family: "clearsans";
  src: url("fonts/clearsans-400.eot");
  src: url('fonts/clearsans-400.eot?#iefix') format('embedded-opentype'), url("fonts/clearsans-400.woff2") format("woff2"), url("fonts/clearsans-400.woff") format("woff"), url("fonts/clearsans-400.ttf") format("truetype"), url("fonts/clearsans-400.svg#clearsans400") format("svg");
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: "clearsans";
  src: url("fonts/clearsans-400-italic.eot");
  src: url('fonts/clearsans-400-italic.eot?#iefix') format('embedded-opentype'), url("fonts/clearsans-400-italic.woff2") format("woff2"), url('fonts/clearsans-400-italic.woff') format('woff'), url('fonts/clearsans-400-italic.ttf') format('truetype'), url('fonts/clearsans-400-italic.svg#clearsans400italic') format('svg');
  font-weight: 400;
  font-style: italic;
}

@font-face {
  font-family: "clearsans";
  src: url("fonts/clearsans-700.eot");
  src: url('fonts/clearsans-700.eot?#iefix') format('embedded-opentype'), url("fonts/clearsans-700.woff2") format("woff2"), url("fonts/clearsans-700.woff") format("woff"), url("fonts/clearsans-700.ttf") format("truetype"), url("fonts/clearsans-700.svg#clearsans700") format("svg");
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: "clearsans";
  src: url("fonts/clearsans-700-italic.eot");
  src: url('fonts/clearsans-700-italic.eot?#iefix') format('embedded-opentype'), url("fonts/clearsans-700-italic.woff2") format("woff2"), url('fonts/clearsans-700-italic.woff') format('woff'), url('fonts/clearsans-700-italic.ttf') format('truetype'), url('fonts/clearsans-700-italic.svg#clearsans700italic') format('svg');
  font-weight: 700;
  font-style: italic;
}

/* SG
# Mixins/Media Queries [[dev]]

@file globals/tools/_t-media-queries.scss

##### `@media-query()`
###### mixin(`$media-queries...`)
Enclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).

**Alternative Uses:**

* Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.

* Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.

* Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.

* Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.

@requires `mq-arglist-to-map()`, `$$breakpoints`
@alias @mq(), @breakpoint(), @bp()

*/
/* SG

# Mixins/CSS Helpers [[dev]]

@file tools/_t-mixins.scss

##### `@specificity()`
###### mixin(`$specificity: 1`)
Specificity increaser. Useful for increasing specificity of a selector instead of using `!important`.
```scss
.class {
    @include specificity(2) {
        color: red;
    }
}

//css
.class.class {
    color: red;
}

```
[Reference](http://www.sitepoint.com/selector-specificity-css-preprocessors/)


##### `@opacity()`
###### mixin(`$opacity`)
Cross-browser (including IE8-) opacity.
[Reference](https://gist.github.com/jgv/745754)


##### `@border()`
###### mixin(`$border`)
Allows creating many border properties at once. Works like the standard border shorthand style but allows varied styles on different border directions.

```scss
//scss
.foo {
	@include border(2px 3px solid dashed dotted blue currentColor yellow);
}

//css
.foo {
	border-width: 2px 3px;
	border-style: solid dashed dotted;
	border-color: blue currentColor yellow;
}

```
*/
/* SG
# Tools/Z-Index [[dev]]

@file globals/tools/_t-zindex.scss

##### `z()`
###### function(`$layer`, `$modifier: false`)
Returns a numeric value (used for z-index) from a named layer, stored in `$$z-index`. Changing the modifier to anything other than `false` will add 1 plus however many times the value has been called. So, if you've called `z(head, true)` 5 times, and `head`'s default value is 100, you would get a value of 105.

The `$modifier` is useful if you'd like to closely layer z-indexes within the same module. It is rarely necessary, though since z-indexes stack.

*/
/* SG
# Tools/Alignment Utilities [[dev]]

@file tools/_t-alignment.scss

##### `@alignment-utilities()`
###### mixin(`$namespace:''`, `$silent:true`, `$important:false`)
Generates namespaced alignment classes.


##### `@alignment-utilities-init()`
###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$silent:true`, `$important:false`)
The responsive component to `@alignment-utilities()`. Invoke `@alignment-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive alignment classes.

*/
/* SG
# Tools/Display Utilities [[dev]]

@file globals/tools/_t-display.scss

##### `@display-utilities()`
###### mixin(`$namespace:"", $silent:false, $important:true, $class-list:$display-classes`)
Generates classes with display properties defined in `$class-list`. Intelligently extends duplicated display properties.


##### `@display-utilities-init()`
###### mixin(`$breakpoints: $all-breakpoints, $namespace: '', $silent: true, $important: false`)
The responsive component to `@display-utilities()`. Invoke `@display-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive display classes.

*/
/* SG
# Grid System/Variables [[dev]]

@file globals/tools/_t-grid-system.scss

##### `$$human-readable-numerators`
###### List (string)
First words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).


##### `$$human-readable-denominators`
###### List (string)
Second words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).
*/
/* SG
# Grid System/Functions [[dev]]

@file globals/tools/_t-grid-system.scss

##### `grid-size()`
###### function(`$size, $total:` `$$grid-columns`)
Creates a percentage based on the `$size / $total`.

*/
/* SG
# Grid System/Mixins [[dev]]

@file globals/tools/_t-grid-system.scss

##### `@silent-relative()`
###### mixin()
Allows for conditional `position: relative` for silent push or pull classes.

*/
/* SG
# Grid System/Mixins [[dev]]

##### `@grid-setup()`
###### mixin(`$silent:` `$$grid-silent-classes`)
Creates basic grid classes (listed below), called by `@grid-init()`.

_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._

* ###### `%grid_reset`
 Useful for resetting the grid's effects without making full grid items.

* ###### `[% || .]grid`
 Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).

* ###### `[% || .]grid_item`
 Sets up a grid column. Uses column padding inherited from parent `%/.grid`.

* ###### `[% || .]grid_rev`
 Makes grid columns start from the right.

* ###### `[% || .]grid_right`
 Makes all grid columns align to the right.

* ###### `[% || .]grid_center`
 Makes all grid columns align to the center.

* ###### `[% || .]grid_middle`
 Makes all grid columns vertical align to the middle.

* ###### `[% || .]grid_bottom`
 Makes all grid columns vertical align to the bottom.

* ###### `[% || .]grid_full`
 Eliminates padding between grid columns.

* ###### `[% || .]grid_narrow`
 Reduces the padding between grid columns.

* ###### `[% || .]grid_wide`
 Increases the padding between grid columns.

*/
/* SG

# Grid System/Mixins [[dev]]

##### `@grid-width()`
###### mixin(`$columns, $total:` `$$grid-columns`)
Creates a width property with a percentage based on the `$columns / $total`.
@requires `grid-size()`, `$$grid-columns`


##### `@width-setup()`
###### mixin(`$namespace:"", $silent:` `$$grid-silent-classes`)
 Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentage widths based on `$$grid-columns`.
@requires `grid-size()`, `cache()`, `$$human-readable-numerators`, `$$human-readable-denominators`

*/
/* SG
# Grid System/Mixins [[dev]]

##### `@push-pull-setup()`
###### mixin(`$namespace:"", $type:"", $silent:` `$$grid-silent-classes`)
Outputs left/right percentage values for each grid size. Uses `$$human-readable-numerators` and `$$human-readable-denominators` for class names.

@requires `@silent-relative()`, `cache()`, `grid-size()`,`$$human-readable-numerators`, `$$human-readable-denominators`

*/
/* SG
# Grid System/Mixins [[dev]]

##### `@grid-init()`
###### mixin(`$silent:` `$$grid-silent-classes`, `$responsive`)
Creates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.
@requires `@media-query()`, `@grid-setup()`, `@width-setup()`, `@push-pull-setup()`, `$$breakpoints-has-push`, `$$breakpoint-has-pull`

*/
/* SG
# Tools/Spacing Utilities [[dev]]

@file tools/_t-spacing.scss

##### `layout-type()`
###### function(`$space-type:''`, `$space-direction:''`)
Parse strings to determine spacing types. Checks for certain characters within a string to determine whether to output padding or margin, followed by a direction. Private function used by `@spacing-utilities()`.


##### `@spacing-utilities()`
###### mixin(`$namespace:''`, `$config:()`)
Generates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.

**`$config` Keys:**
* `silent:` boolean for outputting silent/non-silent classes.
* `important:` whether to output !important after each declaration.
* `directions:` names that get appended to class names.
* `amounts:` how much to multiply spacing unit by `$$base-line-height`.
* `names:` corresponding names for each `amounts` that gets appended to class names.
* `prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.


##### `@spacing-utilities-init()`
###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)
The responsive component to `@spacing-utilities()`. Invoke `@spacing-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive spacing classes.

*/
/* SG
# Tools/Type Utilities [[dev]]

@file tools/_t-type.scss

##### `@type-utilities()`
###### mixin(`$namespace:''`, `$silent: true`, `$important: false)`
A set of typography-based utility classes that can be generated within media-queries via the `$namespace` argument. Can output silent or real css classes. Can also make declarations `!important`.

##### `@type-utilities-init()`
###### mixin(`$breakpoints`:`$$all-breakpoints`, `$namespace:''`, `$silent: true`, `$important: false`)
The responsive component to `@type-utilities()`. Invoke `@type-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive typography-based utility classes.

*/
/* SG
# Mixins/Typography [[dev]]

@file tools/_t-type.scss

##### `@px-to-rems()`
###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)
Takes a pixel value and creates a property with a `rem` value. If `$$rem-px-fallback` is `true`, a pixel fallback is also included.
@alias `@rems()`
@requires `px-to-rems()`

*/
/* SG
# Mixins/Typography [[dev]]

##### `@type-font-size()`
###### mixin(`$font-size, $line-height: true, $font-base:``$$base-font-size`)
Quickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.

_`$line-height` also accepts a pixel value and will be converted to a unitless one._

@alias `@font-size()`
@requires `@px-to-rems()`, `cache()`, `baseline-calc()`

*/
/* SG
# Mixins/Typography [[dev]]

##### `@type-space()`
###### mixin(`$properties, $multipliers, $important: false`)
Output REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.

**Arguments:**
* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).
* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.
* `$important`: Accepts `true` or `!important`.

**Example**
```scss
// SCSS input
.foo {
	@include type-space(padding, 1 .25 .5, '!important');
}

// CSS output
.foo {
	padding: 24px 8px 12px 8px !important;
	padding: 1.5rem .375rem .75rem .375rem !important;
}
```

@requires `@px-to-rems()`, `str-contains()`

*/
html,
body {
  min-height: 100%;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}

body {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
}

abbr[title],
dfn[title] {
  cursor: help;
}

u,
ins {
  text-decoration: none;
}

ins {
  border-bottom: 1px solid;
}

mark {
  background-color: #e9c5c9;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary,
hr {
  display: block;
}

a {
  cursor: pointer;
  background-color: transparent;
  color: #C41226;
}

a:hover, a:focus {
  color: #D63846;
}

a:active {
  color: #901220;
}

a:focus {
  outline: thin dotted;
}

a:active, a:hover {
  outline: 0;
}

hr {
  height: 2px;
  border-top: 2px solid #ddd;
  margin: 24px 0;
  margin:  1.5rem 0;
}

/*! sanitize.css v3.0.0 | CC0 1.0 Public Domain | github.com/10up/sanitize.css */
/*
 * Normalization
 */
audio:not([controls]) {
  display: none;
}

button {
  overflow: visible;
  -webkit-appearance: button;
}

html {
  -ms-overflow-style: -ms-autohiding-scrollbar;
  overflow-y: scroll;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}

input {
  -webkit-border-radius: 0;
}

input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
}

input[type="number"] {
  width: auto;
}

input[type="search"] {
  -webkit-appearance: textfield;
}

input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

pre {
  overflow: auto;
}

progress {
  display: inline-block;
}

svg:not(:root) {
  overflow: hidden;
}

template {
  display: none;
}

textarea {
  overflow: auto;
  resize: vertical;
}

[hidden] {
  display: none;
}

/*
 * Universal inheritance
 */
*,
::before,
::after {
  -webkit-box-sizing: inherit;
     -moz-box-sizing: inherit;
          box-sizing: inherit;
}

* {
  font-size: inherit;
  line-height: inherit;
}

::before,
::after {
  text-decoration: inherit;
  vertical-align: inherit;
}

/*
 * Opinionated defaults
 */
*,
::before,
::after {
  border-style: solid;
  border-width: 0;
}

* {
  background-repeat: no-repeat;
  margin: 0;
  padding: 0;
}

:root {
  background-color: #f2f2f2;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
  color: #252D34;
  cursor: inherit;
  font: 100%/1.5 "clearsans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  text-rendering: optimizeLegibility;
}

a {
  text-decoration: none;
}

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}

button,
input,
select,
textarea {
  color: inherit;
  font-family: inherit;
  font-style: inherit;
  font-weight: inherit;
}

button,
[type="button"],
[type="date"],
[type="datetime"],
[type="datetime-local"],
[type="email"],
[type="month"],
[type="number"],
[type="password"],
[type="reset"],
[type="search"],
[type="submit"],
[type="tel"],
[type="text"],
[type="time"],
[type="url"],
[type="week"],
select,
textarea {
  min-height: 1.5rem;
}

code,
kbd,
pre,
samp {
  font-family: "Consolas", "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", "Monaco", "Courier New", "Courier", monospace, monospace;
}

nav ol,
nav ul {
  list-style: none;
}

select {
  -moz-appearance: none;
  -webkit-appearance: none;
}

select::-ms-expand {
  display: none;
}

select::-ms-value {
  color: currentColor;
}

::-moz-selection {
  background-color: #d66c78;
  color: #fff;
  text-shadow: none;
}

::selection {
  background-color: #d66c78;
  color: #fff;
  text-shadow: none;
}

[aria-busy="true"] {
  cursor: progress;
}

[aria-controls] {
  cursor: pointer;
}

[aria-disabled] {
  cursor: default;
}

[hidden][aria-hidden="false"] {
  clip: rect(0 0 0 0);
  display: inherit;
  position: absolute;
}

[hidden][aria-hidden="false"]:focus {
  clip: auto;
}

h1, h2, h3, h4, h5, h6 {
  font-family: "Merriweather", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif;
}

table, p, address, pre {
  margin: 0 0 24px;
  margin:  0 0 1.5rem;
}

.visually_hidden {
  border: 0;
  clip: rect(0 0 0 0);
  clip: rect(0px, 0px, 0px, 0px);
  width: 1px;
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  -webkit-transition: all 300ms ease-in-out;
          transition: all 300ms ease-in-out;
}

legend {
  display: table;
  white-space: normal;
}

button,
input {
  line-height: normal;
}

button,
input[type="button"],
input[type="reset"],
input[type="submit"] {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  border: 0;
  -webkit-appearance: button;
  cursor: pointer;
  *overflow: visible;
}

button,
input,
select,
textarea {
  background-color: #fff;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

input[type="checkbox"],
input[type="radio"] {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
  padding: 0;
  *height: 13px;
  *width: 13px;
}

button[disabled],
input[disabled] {
  cursor: default !important;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}

select input[type="submit"],
input[type="button"],
input[type="image"],
input[type="reset"] {
  -moz-border-radius: 0;
       border-radius: 0;
  -webkit-border-radius: 0;
}

ul,
ol,
dl,
menu {
  margin: 0 0 24px 24px;
  margin:  0 0 1.5rem 1.5rem;
}

li > ul,
li > ol {
  margin-bottom: 0;
}

nav ol,
nav ul {
  margin-left: 0;
}

table {
  margin-bottom: 24px;
  margin-bottom:  1.5rem;
  margin-left: -12px;
  margin-left:  -0.75rem;
  border-spacing: 0.75rem 0;
  width: 100%;
  background-color: transparent;
}

th,
td {
  border: 0 solid #6E6E6E;
  border-style: solid;
  padding: 6px 0 24px;
  padding:  0.375rem 0 1.5rem;
  vertical-align: top;
  text-align: left;
}

td,
th {
  border-top-width: 1px;
}

th {
  font-weight: normal;
}

thead th {
  vertical-align: bottom;
  padding: 0 0 6px;
  padding:  0 0 0.375rem;
  color: #C41226;
  border-width: 0;
}

h1, h2, h3, h4, h5, h6 {
  margin-bottom: 24px;
  margin-bottom:  1.5rem;
}

h1 {
  font-size: 66.85966px;
  font-size: 4.17873rem;
  line-height: 1.07688;
}

h2 {
  font-size: 61.4656px;
  font-size: 3.8416rem;
  line-height: 1.17139;
}

h3 {
  font-size: 43.904px;
  font-size: 2.744rem;
  line-height: 1.09329;
}

h4 {
  font-size: 31.36px;
  font-size: 1.96rem;
  line-height: 1.53061;
}

h5 {
  font-size: 22.4px;
  font-size: 1.4rem;
  line-height: 1.60714;
}

h6 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333;
}

h1 + p, h2 + p, h3 + p, h4 + p, h5 + p, h6 + p {
  margin-top: -24px;
  margin-top:  -1.5rem;
}

/* SG
# Typography/Body copy

The default font size for all typography is 16px with line-height of 24px(1.5). This is applied to the body and all paragraphs. `<p>` tags all receive a bottom margin of 24px.

```html_example
<p>Aenean lacinia bibendum nulla sed consectetur. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Sed posuere consectetur est at lobortis. </p>
<p>Nullam quis risus eget urna mollis ornare vel eu leo. Nulla vitae elit libero, a pharetra augue.</p>
```

*/
small {
  display: inline-block;
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
}

b,
strong {
  font-weight: 700;
}

pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word;
  overflow: auto;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5ex;
}

sub {
  bottom: -0.25ex;
}

abbr {
  letter-spacing: 0.05em;
}

code,
kbd,
pre,
samp {
  font-family: "Consolas", "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", "Monaco", "Courier New", "Courier", monospace;
  _font-family: 'courier new', monospace;
  font-size: 1em;
}

blockquote {
  text-indent: -.5ex;
}

blockquote {
  margin: 0 0 24px 24px;
  margin:  0 0 1.5rem 1.5rem;
  quotes: '“' '”';
}

blockquote p:before {
  content: "“";
  content: open-quote;
}

blockquote p:after {
  content: "";
  content: no-close-quote;
}

blockquote p:last-of-type:after {
  content: "”";
  content: close-quote;
}

q {
  *quotes: none;
  quotes: "‘" "’" "“" "”";
  overflow: visible;
}

q:before {
  content: "‘";
  content: open-quote;
}

q:after {
  content: "’";
  content: close-quote;
}

q q:before {
  content: "“";
  content: open-quote;
}

q q:after {
  content: "”";
  content: close-quote;
}

q:first-child {
  display: inline-block;
  text-indent: -0.22em;
}

.wrap {
  display: block !important;
  margin-left: auto;
  margin-right: auto;
}

.wrap--small {
  padding: 24px 0;
  padding:  1.5rem 0;
  max-width: 924px;
  max-width: 57.75rem;
  width: 90%;
}

@media only screen and (max-width: 480px) {
  .wrap--small {
    width: 98%;
  }
}

.wrap--large {
  padding: 24px 0;
  padding:  1.5rem 0;
  max-width: 1008px;
  max-width: 63rem;
  width: 98%;
}

.grid > * {
  letter-spacing: normal;
  word-spacing: normal;
}

.grid {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -24px;
  margin-left:  -1.5rem;
  letter-spacing: -0.43em;
}

.opera:-o-prefocus,
.grid {
  word-spacing: -0.43em;
}

.grid__item {
  display: inline-block;
  padding-left: 24px;
  padding-left:  1.5rem;
  vertical-align: top;
  width: 100%;
  letter-spacing: normal;
  word-spacing: normal;
}

.grid--right {
  text-align: right;
}

.grid--right > .grid__item {
  text-align: left;
}

.grid--middle > .grid__item {
  vertical-align: middle;
}

.grid--full {
  margin-left: 0;
}

.grid--full > .grid__item {
  padding-left: 0;
}

.grid--narrow {
  margin-left: -12px;
  margin-left:  -0.75rem;
}

.grid--narrow > .grid__item {
  padding-left: 12px;
  padding-left:  0.75rem;
}

.grid--wide {
  margin-left: -48px;
  margin-left:  -3rem;
}

.grid--wide > .grid__item {
  padding-left: 48px;
  padding-left:  3rem;
}

.full {
  width: 100%;
}

.two-fifths {
  width: 40%;
}

.three-fifths {
  width: 60%;
}

.quarter {
  width: 25%;
}

.third {
  width: 33.33333%;
}

.two-thirds {
  width: 66.66667%;
}

.half {
  width: 50%;
}

@media only screen and (max-width: 640px) {
  .smalls-half {
    width: 50%;
  }
}

@media only screen and (min-width: 481px) and (max-width: 640px) {
  .add-on {
    width: 20%;
  }
  .content--wide {
    width: 80%;
  }
}

@media only screen and (min-width: 641px) {
  .add-on {
    width: 16.66667%;
  }
  .content--wide {
    width: 83.33333%;
  }
  .sidebar {
    width: 25%;
  }
  .content {
    width: 75%;
  }
}

@media only screen and (max-width: 640px) {
  .grid--wide {
    margin-left:  -1.5rem;
  }
  .grid--wide > .grid__item {
    padding-left:  1.5rem;
  }
}

.auto {
  width: auto;
}

@media only screen and (max-width: 640px) {
  .grid--stack > .grid__item {
    width: 100%;
  }
}

.top-nav {
  position: relative;
  z-index: 1;
  padding: 6px 12px;
  padding:  0.375rem 0.75rem;
  opacity: .6;
  background-color: #fff;
  -webkit-transition: opacity .1s ease-out;
          transition: opacity .1s ease-out;
}

.top-nav:hover {
  opacity: 1;
  -webkit-box-shadow: 0 2px 5px rgba(73, 8, 16, 0.1);
     -moz-box-shadow: 0 2px 5px rgba(73, 8, 16, 0.1);
          box-shadow: 0 2px 5px rgba(73, 8, 16, 0.1);
}

.top-nav a {
  display: inline-block;
  height: 24px;
  height:  1.5rem;
  line-height: 1;
  text-align: center;
}

.top-nav .btn {
  vertical-align: bottom;
  width: 12vw;
  min-width: 8rem;
}

.bg-light {
  background-color: rgba(255, 255, 255, 0.56);
}

.bg-dark {
  background-color: #ddd;
}

.txt-label {
  color: #6E6E6E;
}

.btn {
  display: inline-block;
  padding: 18px;
  padding:  1.125rem;
  color: #fff;
  line-height: 1;
  background-color: #C41226;
  text-align: center;
}

.btn:hover, .btn:focus {
  color: #fcf3f4;
  background-color: #D63846;
  -webkit-box-shadow: 0 2px 15px 1px rgba(163, 42, 55, 0.3), 0 1px 2px 1px rgba(73, 8, 16, 0.1);
     -moz-box-shadow: 0 2px 15px 1px rgba(163, 42, 55, 0.3), 0 1px 2px 1px rgba(73, 8, 16, 0.1);
          box-shadow: 0 2px 15px 1px rgba(163, 42, 55, 0.3), 0 1px 2px 1px rgba(73, 8, 16, 0.1);
}

.btn:active {
  color: #deb8bc;
  background-color: #C41226;
  -webkit-box-shadow: inset 0 2px 1px rgba(0, 0, 0, 0.5), 0 0 3px rgba(196, 18, 38, 0.3);
     -moz-box-shadow: inset 0 2px 1px rgba(0, 0, 0, 0.5), 0 0 3px rgba(196, 18, 38, 0.3);
          box-shadow: inset 0 2px 1px rgba(0, 0, 0, 0.5), 0 0 3px rgba(196, 18, 38, 0.3);
}

.btn--small {
  padding-top: 6px;
  padding-top:  0.375rem;
  padding-bottom: 6px;
  padding-bottom:  0.375rem;
}

.btn--large {
  display: table;
  width: 25%;
  letter-spacing: .01em;
}

.btn--dark {
  background-color: #A32A37;
}

.btn--dark:hover {
  background-color: #C41226;
}

/* SG
# Typography/Heading sizes

Moving from `h6` up to `h1`, the heading font sizes get larger on a scale of 1.4. For instance, `h6` is 1.4 times larger than the base font size of 16px. Headings have a default bottom margin of 24px.

**Heading tags should be used in a hierarchical manner**, appropriate for the page, and not used for their size. To override a heading size, use a class with the corresponding heading name. See the example below.

```html_example
<h1>Heading 1 <small>(66.85966px / 1.07688)</small></h1>
<h2>Heading 2 <small>(61.4656px / 1.17139)</small></h2>
<h3>Heading 3 <small>(43.904px / 1.09329)</small></h3>
<h4>Heading 4 <small>(31.36px / 1.53061)</small></h4>
<h5>Heading 5 <small>(22.4px / 1.60714)</small></h5>
<h6>Heading 6 <small>(18px / 24px)</small></h6>

<h1 class="h4">Heading 1 with an h4 class</h1>

```
*/
.h1, .h2, .h3, .h4, .h5, .hero__description, .h6 {
  margin-bottom: 24px;
  margin-bottom:  1.5rem;
}

.h1 {
  font-size: 66.85966px;
  font-size: 4.17873rem;
  line-height: 1.07688;
}

.h2 {
  font-size: 61.4656px;
  font-size: 3.8416rem;
  line-height: 1.17139;
}

.h3 {
  font-size: 43.904px;
  font-size: 2.744rem;
  line-height: 1.09329;
}

.h4 {
  font-size: 31.36px;
  font-size: 1.96rem;
  line-height: 1.53061;
}

.h5, .hero__description {
  font-size: 22.4px;
  font-size: 1.4rem;
  line-height: 1.60714;
}

.h6 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333;
}

.h1 + p, .h2 + p, .h3 + p, .h4 + p, .h5 + p, .h6 + p {
  margin-top: -24px;
  margin-top:  -1.5rem;
}

.heading--section {
  color: type(light);
  font-size: 31.36px;
  font-size: 1.96rem;
  line-height: 1.53061;
  font-weight: normal;
}

.heading--page {
  font-size: 61.4656px;
  font-size: 3.8416rem;
  line-height: 1.17139;
  color: #C41226;
  font-weight: normal;
  font-family: "clearsans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
}

/* SG

# Layout/Isolation object

Isolates an image from text wrapping underneath. Useful for creating an association between an image and text. Often used with an icon or avatar. Adding other classes to the `isolate_body` can create a more stylized version.

```html_example
<img class="isolate_media" src="http://placehold.it/300x48" alt="placeholder image">
<p class="isolate_body">
	Content that sits to the right of the image but will never wrap underneath the image to the left. Etiam porta sem malesuada magna mollis euismod. Cras justo odio, dapibus ac facilisis in, egestas eget quam.
</p>

```
*/
.isolate_media, .isolate_body {
  overflow: hidden;
  _overflow: visible;
  zoom: 1;
}

.isolate_media {
  float: left;
}

.isolate, .isolate_media, .isolate_media img, .isolate_body {
  display: block;
}

.isolate {
  width: 100%;
  margin-bottom: 24px;
  margin-bottom:  1.5rem;
}

.isolate_body {
  padding-left: 12px;
  padding-left:  0.75rem;
}

/* SG

# Layout/Arrangement object

Creates an image-content block that vertically aligns images and text (centered, bottom, or top).
Children can be named four things:
* `arrange_fit` or `arrange_media` will create a block that fits the width of its content (useful for images).
* `arrange_fill` will fill the remaining space.
* `arrange_body` are similar but have some default styling.

You may also combine this with grid items like `row` and `column` if you wish to add gutters between elements.

_NOTE: Do not mistake this for true grid items. This should only be used for the arrangement of a few items. It is "squishy", but not technically responsive._

```html_example
<div class="arrange">
	<div class="arrange_media">
		<img src="http://placehold.it/60x48" alt="placeholder image">
	</div>
	<div class="arrange_body">
		Content that is vertically (middle) aligned with the image.
	</div>
</div>

<!-- Bottom Arrangement -->
<div class="arrange arrange_bottom">
	<div class="arrange_media">
		<img src="http://placehold.it/60x48" alt="placeholder image">
	</div>
	<div class="arrange_body">
		Content that is bottom aligned to the image.
	</div>
</div>

<!-- Equal width arrangement-->
<div class="arrange arrange_equal">
	<div class="arrange_fill">
		Equal width columns.
	</div>
	<div class="arrange_fill">
		<img class="show" src="http://placehold.it/120x72" alt="placeholder image" style="margin: auto;">
	</div>
	<div class="arrange_fill">
		Can be as many columns as you want.
	</div>
</div>

```
*/
.arrange {
  table-layout: auto;
  min-width: 100%;
  display: table;
  width: 100%;
  margin-bottom: 24px;
  margin-bottom:  1.5rem;
}

.arrange_fill, .arrange_fit, .arrange_media, .arrange_body {
  display: table-cell;
}

.arrange_fill, .arrange_body {
  width: 100%;
}

.arrange_media img, .arrange_fit img {
  display: block;
  max-width: none;
}

.arrange_body {
  padding-left: 12px;
  padding-left:  0.75rem;
}

.arrange_media, .arrange_body, .arrange_fill, .arrange_fit {
  vertical-align: middle;
}

.arrange_top > .arrange_media, .arrange_top > .arrange_body, .arrange_top > .arrange_fill, .arrange_top > .arrange_fit {
  vertical-align: top;
}

.arrange_bottom > .arrange_media, .arrange_bottom > .arrange_body, .arrange_bottom > .arrange_fill, .arrange_bottom > .arrange_fit {
  vertical-align: bottom;
}

.arrange_equal {
  table-layout: fixed;
}

.arrange_equal > .arrange_fill,
.arrange_equal > .arrange_fit {
  width: 1%;
}

.hero {
  display: table;
  position: relative;
  width: 100%;
  height: 40vh;
  max-height: 480px;
  max-height:  30rem;
  -webkit-background-size: cover;
          background-size: cover;
  text-align: center;
}

.hero--small {
  text-align: left;
  position: static;
  height: 28vh;
}

.hero--small .wrap:after {
  content: " ";
  display: block;
  border-bottom: 1px solid #C41226;
  width: 25%;
  height: 12px;
  height:  0.75rem;
  max-width: 120px;
  max-width:  7.5rem;
  -webkit-transition: width 100ms cubic-bezier(0.2, -0.26, 0.22, 1.1);
          transition: width 100ms cubic-bezier(0.2, -0.26, 0.22, 1.1);
}

.hero__body {
  display: table-row;
  vertical-align: middle;
  padding-top: 48px;
  padding-top:  3rem;
  max-width: 98%;
}

.hero__description {
  padding-top: 24px;
  padding-top:  1.5rem;
  padding-bottom: 24px;
  padding-bottom:  1.5rem;
  max-width: 576px;
  max-width:  36rem;
  width: 95%;
}

@media only screen and (max-width: 640px) {
  .hero__description {
    font-size: 1rem;
    line-height: 1.5;
  }
}

[id="particle-canvas"] {
  width: 100%;
  height: 100%;
  z-index: 0;
}

.search {
  position: relative;
  margin-top: -36px;
  margin-top:  -2.25rem;
}

.search__input {
  -webkit-box-shadow: 0 0 28px rgba(73, 8, 16, 0.1);
     -moz-box-shadow: 0 0 28px rgba(73, 8, 16, 0.1);
          box-shadow: 0 0 28px rgba(73, 8, 16, 0.1);
  outline: none;
}

.search__input:focus {
  -webkit-box-shadow: 0 0 28px rgba(72, 9, 16, 0.25);
     -moz-box-shadow: 0 0 28px rgba(72, 9, 16, 0.25);
          box-shadow: 0 0 28px rgba(72, 9, 16, 0.25);
}

.search__button {
  position: absolute;
  top: 18px;
  top:  1.125rem;
  right: 18px;
  right:  1.125rem;
  width: 36px;
  width:  2.25rem;
  height: 36px;
  height:  2.25rem;
  padding: 12px;
  padding:  0.75rem;
  background: #fff url("../img/icon_search.svg") center no-repeat;
}

[data-jets] {
  opacity: 1;
  -webkit-transition: all .2s ease-out;
          transition: all .2s ease-out;
  -webkit-transform-origin: bottom;
     -moz-transform-origin: bottom;
      -ms-transform-origin: bottom;
          transform-origin: bottom;
}

[data-jets]:not([data-jets="osteoperosis"]) {
  opacity: .6;
  pointer-events: none;
  cursor: default;
}

.logo {
  display: inline-block;
  white-space: nowrap;
  font-family: "Merriweather", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif;
  font-weight: 700;
  color: #252D34;
}

@media only screen and (max-width: 640px) {
  .hero .logo--hero {
    font-size: 8vw;
  }
}

.logo__plus {
  position: relative;
  display: inline-block;
  top: -.35em;
  border-bottom: .075em solid;
  padding-right: .35em;
  color: #C41226;
  font-size: .75em;
  font-weight: 400;
  line-height: 1;
}

.logo--top-nav {
  line-height: 1;
}

.support-logo {
  opacity: .35;
}

.support-logo:hover {
  opacity: .9;
}

.panel {
  padding: 12px;
  padding:  0.75rem;
  background-color: rgba(255, 255, 255, 0.7);
}

.panel:after {
  content: " ";
  display: block;
  border-bottom: 1px solid #6E6E6E;
  width: 25%;
  height: 12px;
  height:  0.75rem;
  max-width: 240px;
  max-width:  15rem;
  -webkit-transition: width 100ms cubic-bezier(0.2, -0.26, 0.22, 1.1);
          transition: width 100ms cubic-bezier(0.2, -0.26, 0.22, 1.1);
}

.panel--link {
  display: inline-block;
  outline: none;
  -webkit-transition: -webkit-box-shadow .1s ease-out;
          transition: -moz-box-shadow .1s ease-out;
          transition: box-shadow .1s ease-out;
}

.panel--link:after {
  border-color: #C41226;
}

.panel--link:hover, .panel--link:focus {
  color: #C41226;
  background-color: #fff;
  -webkit-box-shadow: 0 9px 18px rgba(73, 8, 16, 0.1), 0 1px 3px 1px rgba(144, 18, 32, 0.1), 0 2px 5px -1px rgba(73, 8, 16, 0.08);
     -moz-box-shadow: 0 9px 18px rgba(73, 8, 16, 0.1), 0 1px 3px 1px rgba(144, 18, 32, 0.1), 0 2px 5px -1px rgba(73, 8, 16, 0.08);
          box-shadow: 0 9px 18px rgba(73, 8, 16, 0.1), 0 1px 3px 1px rgba(144, 18, 32, 0.1), 0 2px 5px -1px rgba(73, 8, 16, 0.08);
}

.panel--link:hover:after, .panel--link:focus:after {
  width: 33.33%;
}

.panel--link:hover .panel__body, .panel--link:focus .panel__body {
  color: #C41226;
}

.panel__body {
  font-weight: 400;
  font-family: "clearsans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  color: #252D34;
}

.panel--header {
  display: block;
  background-color: transparent;
}

.editor_content ul {
  list-style: bulleted;
  margin-left: 24px;
  margin-left:  1.5rem;
}

.list_naked {
  list-style: none;
  margin: 0;
}

.list_naked > li {
  list-style-image: none;
  list-style-type: none;
  margin-left: 0;
}

.link_naked {
  color: inherit;
  text-decoration: none;
}

.link_naked:hover, .link_naked:focus {
  color: inherit;
  text-decoration: none;
}

.invisible {
  visibility: hidden !important;
}

.visually_hidden.focusable:active,
.visually_hidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

.hidden {
  display: none !important;
  visibility: hidden !important;
}

.contain {
  position: relative !important;
}

.nowrap {
  white-space: nowrap !important;
}

.z1 {
  position: relative;
  z-index: 1 !important;
}


.wrap,
.isolate,
.clearfix {
  *zoom: 1;
}


.wrap:before,
.isolate:before,
.clearfix:before,
.wrap:after,
.isolate:after,
.clearfix:after {
  display: table;
  content: " ";
}


.wrap:after,
.isolate:after,
.clearfix:after {
  clear: both;
  height: 0;
  width: 0;
}

.align_left {
  float: left !important;
  margin-right: 24px;
  margin-right:  1.5rem;
}

.align_right {
  float: right !important;
  margin-left: 24px;
  margin-left:  1.5rem;
}

.align_center {
  float: none !important;
  margin: 0 auto !important;
  display: block !important;
}

.align_none {
  float: none !important;
  margin: 0 !important;
}

.float_left {
  float: left !important;
}

.float_right {
  float: right !important;
}

.float_none {
  float: none !important;
}

.align_middle {
  vertical-align: middle;
}

.align_bottom {
  vertical-align: bottom;
}

.align_top {
  vertical-align: top;
}

@media only screen and (max-width: 640px) {
  .smalls_align_left {
    float: left !important;
    margin-right:  1.5rem;
  }
  .smalls_align_right {
    float: right !important;
    margin-left:  1.5rem;
  }
  .smalls_align_center {
    float: none !important;
    margin: 0 auto !important;
    display: block !important;
  }
  .smalls_align_none {
    float: none !important;
    margin: 0 !important;
  }
  .smalls_float_left {
    float: left !important;
  }
  .smalls_float_right {
    float: right !important;
  }
  .smalls_float_none {
    float: none !important;
  }
  .smalls_align_middle {
    vertical-align: middle;
  }
  .smalls_align_bottom {
    vertical-align: bottom;
  }
  .smalls_align_top {
    vertical-align: top;
  }
}

@media only screen and (min-width: 641px) {
  .bigs_align_left {
    float: left !important;
    margin-right:  1.5rem;
  }
  .bigs_align_right {
    float: right !important;
    margin-left:  1.5rem;
  }
  .bigs_align_center {
    float: none !important;
    margin: 0 auto !important;
    display: block !important;
  }
  .bigs_align_none {
    float: none !important;
    margin: 0 !important;
  }
  .bigs_float_left {
    float: left !important;
  }
  .bigs_float_right {
    float: right !important;
  }
  .bigs_float_none {
    float: none !important;
  }
  .bigs_align_middle {
    vertical-align: middle;
  }
  .bigs_align_bottom {
    vertical-align: bottom;
  }
  .bigs_align_top {
    vertical-align: top;
  }
}

@media only screen and (min-width: 941px) {
  .desk_align_left {
    float: left !important;
    margin-right:  1.5rem;
  }
  .desk_align_right {
    float: right !important;
    margin-left:  1.5rem;
  }
  .desk_align_center {
    float: none !important;
    margin: 0 auto !important;
    display: block !important;
  }
  .desk_align_none {
    float: none !important;
    margin: 0 !important;
  }
  .desk_float_left {
    float: left !important;
  }
  .desk_float_right {
    float: right !important;
  }
  .desk_float_none {
    float: none !important;
  }
  .desk_align_middle {
    vertical-align: middle;
  }
  .desk_align_bottom {
    vertical-align: bottom;
  }
  .desk_align_top {
    vertical-align: top;
  }
}

.space_0 {
  margin: 0 !important;
}

.space_t_0, .space_v_0 {
  margin-top: 0 !important;
}

.space_l_0, .space_h_0 {
  margin-left: 0 !important;
}

.space_b_0, .space_v_0 {
  margin-bottom: 0 !important;
}

.space_r_0, .space_h_0 {
  margin-right: 0 !important;
}

.space {
  margin: 24px !important;
  margin:  1.5rem !important;
}

.space_t, .space_v {
  margin-top: 24px !important;
  margin-top:  1.5rem !important;
}

.space_l, .space_h {
  margin-left: 24px !important;
  margin-left:  1.5rem !important;
}

.space_b, .space_v {
  margin-bottom: 24px !important;
  margin-bottom:  1.5rem !important;
}

.space_r, .space_h {
  margin-right: 24px !important;
  margin-right:  1.5rem !important;
}

.space_half {
  margin: 12px !important;
  margin:  0.75rem !important;
}

.space_t_half, .space_v_half {
  margin-top: 12px !important;
  margin-top:  0.75rem !important;
}

.space_l_half, .space_h_half {
  margin-left: 12px !important;
  margin-left:  0.75rem !important;
}

.space_b_half, .space_v_half {
  margin-bottom: 12px !important;
  margin-bottom:  0.75rem !important;
}

.space_r_half, .space_h_half {
  margin-right: 12px !important;
  margin-right:  0.75rem !important;
}

.space_neg {
  margin: -24px !important;
  margin:  -1.5rem !important;
}

.space_t_neg, .space_v_neg {
  margin-top: -24px !important;
  margin-top:  -1.5rem !important;
}

.space_l_neg, .space_h_neg {
  margin-left: -24px !important;
  margin-left:  -1.5rem !important;
}

.space_b_neg, .space_v_neg {
  margin-bottom: -24px !important;
  margin-bottom:  -1.5rem !important;
}

.space_r_neg, .space_h_neg {
  margin-right: -24px !important;
  margin-right:  -1.5rem !important;
}

.space_2 {
  margin: 48px !important;
  margin:  3rem !important;
}

.space_t_2, .space_v_2 {
  margin-top: 48px !important;
  margin-top:  3rem !important;
}

.space_l_2, .space_h_2 {
  margin-left: 48px !important;
  margin-left:  3rem !important;
}

.space_b_2, .space_v_2 {
  margin-bottom: 48px !important;
  margin-bottom:  3rem !important;
}

.space_r_2, .space_h_2 {
  margin-right: 48px !important;
  margin-right:  3rem !important;
}

.pad_0 {
  padding: 0 !important;
}

.pad_t_0, .pad_v_0 {
  padding-top: 0 !important;
}

.pad_l_0, .pad_h_0 {
  padding-left: 0 !important;
}

.pad_b_0, .pad_v_0 {
  padding-bottom: 0 !important;
}

.pad_r_0, .pad_h_0 {
  padding-right: 0 !important;
}

.pad {
  padding: 24px !important;
  padding:  1.5rem !important;
}

.pad_t, .pad_v {
  padding-top: 24px !important;
  padding-top:  1.5rem !important;
}

.pad_l, .pad_h {
  padding-left: 24px !important;
  padding-left:  1.5rem !important;
}

.pad_b, .pad_v {
  padding-bottom: 24px !important;
  padding-bottom:  1.5rem !important;
}

.pad_r, .pad_h {
  padding-right: 24px !important;
  padding-right:  1.5rem !important;
}

.pad_half {
  padding: 12px !important;
  padding:  0.75rem !important;
}

.pad_t_half, .pad_v_half {
  padding-top: 12px !important;
  padding-top:  0.75rem !important;
}

.pad_l_half, .pad_h_half {
  padding-left: 12px !important;
  padding-left:  0.75rem !important;
}

.pad_b_half, .pad_v_half {
  padding-bottom: 12px !important;
  padding-bottom:  0.75rem !important;
}

.pad_r_half, .pad_h_half {
  padding-right: 12px !important;
  padding-right:  0.75rem !important;
}

.pad_2 {
  padding: 48px !important;
  padding:  3rem !important;
}

.pad_t_2, .pad_v_2 {
  padding-top: 48px !important;
  padding-top:  3rem !important;
}

.pad_l_2, .pad_h_2 {
  padding-left: 48px !important;
  padding-left:  3rem !important;
}

.pad_b_2, .pad_v_2 {
  padding-bottom: 48px !important;
  padding-bottom:  3rem !important;
}

.pad_r_2, .pad_h_2 {
  padding-right: 48px !important;
  padding-right:  3rem !important;
}

@media only screen and (max-width: 640px) {
  .smalls_space_0 {
    margin: 0 !important;
  }
  .smalls_space_t_0, .smalls_space_v_0 {
    margin-top: 0 !important;
  }
  .smalls_space_l_0, .smalls_space_h_0 {
    margin-left: 0 !important;
  }
  .smalls_space_b_0, .smalls_space_v_0 {
    margin-bottom: 0 !important;
  }
  .smalls_space_r_0, .smalls_space_h_0 {
    margin-right: 0 !important;
  }
  .smalls_space {
    margin:  1.5rem !important;
  }
  .smalls_space_t, .smalls_space_v {
    margin-top:  1.5rem !important;
  }
  .smalls_space_l, .smalls_space_h {
    margin-left:  1.5rem !important;
  }
  .smalls_space_b, .smalls_space_v {
    margin-bottom:  1.5rem !important;
  }
  .smalls_space_r, .smalls_space_h {
    margin-right:  1.5rem !important;
  }
  .smalls_space_half {
    margin:  0.75rem !important;
  }
  .smalls_space_t_half, .smalls_space_v_half {
    margin-top:  0.75rem !important;
  }
  .smalls_space_l_half, .smalls_space_h_half {
    margin-left:  0.75rem !important;
  }
  .smalls_space_b_half, .smalls_space_v_half {
    margin-bottom:  0.75rem !important;
  }
  .smalls_space_r_half, .smalls_space_h_half {
    margin-right:  0.75rem !important;
  }
  .smalls_space_neg {
    margin:  -1.5rem !important;
  }
  .smalls_space_t_neg, .smalls_space_v_neg {
    margin-top:  -1.5rem !important;
  }
  .smalls_space_l_neg, .smalls_space_h_neg {
    margin-left:  -1.5rem !important;
  }
  .smalls_space_b_neg, .smalls_space_v_neg {
    margin-bottom:  -1.5rem !important;
  }
  .smalls_space_r_neg, .smalls_space_h_neg {
    margin-right:  -1.5rem !important;
  }
  .smalls_space_2 {
    margin:  3rem !important;
  }
  .smalls_space_t_2, .smalls_space_v_2 {
    margin-top:  3rem !important;
  }
  .smalls_space_l_2, .smalls_space_h_2 {
    margin-left:  3rem !important;
  }
  .smalls_space_b_2, .smalls_space_v_2 {
    margin-bottom:  3rem !important;
  }
  .smalls_space_r_2, .smalls_space_h_2 {
    margin-right:  3rem !important;
  }
  .smalls_pad_0 {
    padding: 0 !important;
  }
  .smalls_pad_t_0, .smalls_pad_v_0 {
    padding-top: 0 !important;
  }
  .smalls_pad_l_0, .smalls_pad_h_0 {
    padding-left: 0 !important;
  }
  .smalls_pad_b_0, .smalls_pad_v_0 {
    padding-bottom: 0 !important;
  }
  .smalls_pad_r_0, .smalls_pad_h_0 {
    padding-right: 0 !important;
  }
  .smalls_pad {
    padding:  1.5rem !important;
  }
  .smalls_pad_t, .smalls_pad_v {
    padding-top:  1.5rem !important;
  }
  .smalls_pad_l, .smalls_pad_h {
    padding-left:  1.5rem !important;
  }
  .smalls_pad_b, .smalls_pad_v {
    padding-bottom:  1.5rem !important;
  }
  .smalls_pad_r, .smalls_pad_h {
    padding-right:  1.5rem !important;
  }
  .smalls_pad_half {
    padding:  0.75rem !important;
  }
  .smalls_pad_t_half, .smalls_pad_v_half {
    padding-top:  0.75rem !important;
  }
  .smalls_pad_l_half, .smalls_pad_h_half {
    padding-left:  0.75rem !important;
  }
  .smalls_pad_b_half, .smalls_pad_v_half {
    padding-bottom:  0.75rem !important;
  }
  .smalls_pad_r_half, .smalls_pad_h_half {
    padding-right:  0.75rem !important;
  }
  .smalls_pad_2 {
    padding:  3rem !important;
  }
  .smalls_pad_t_2, .smalls_pad_v_2 {
    padding-top:  3rem !important;
  }
  .smalls_pad_l_2, .smalls_pad_h_2 {
    padding-left:  3rem !important;
  }
  .smalls_pad_b_2, .smalls_pad_v_2 {
    padding-bottom:  3rem !important;
  }
  .smalls_pad_r_2, .smalls_pad_h_2 {
    padding-right:  3rem !important;
  }
}

@media only screen and (min-width: 641px) {
  .bigs_space_0 {
    margin: 0 !important;
  }
  .bigs_space_t_0, .bigs_space_v_0 {
    margin-top: 0 !important;
  }
  .bigs_space_l_0, .bigs_space_h_0 {
    margin-left: 0 !important;
  }
  .bigs_space_b_0, .bigs_space_v_0 {
    margin-bottom: 0 !important;
  }
  .bigs_space_r_0, .bigs_space_h_0 {
    margin-right: 0 !important;
  }
  .bigs_space {
    margin:  1.5rem !important;
  }
  .bigs_space_t, .bigs_space_v {
    margin-top:  1.5rem !important;
  }
  .bigs_space_l, .bigs_space_h {
    margin-left:  1.5rem !important;
  }
  .bigs_space_b, .bigs_space_v {
    margin-bottom:  1.5rem !important;
  }
  .bigs_space_r, .bigs_space_h {
    margin-right:  1.5rem !important;
  }
  .bigs_space_half {
    margin:  0.75rem !important;
  }
  .bigs_space_t_half, .bigs_space_v_half {
    margin-top:  0.75rem !important;
  }
  .bigs_space_l_half, .bigs_space_h_half {
    margin-left:  0.75rem !important;
  }
  .bigs_space_b_half, .bigs_space_v_half {
    margin-bottom:  0.75rem !important;
  }
  .bigs_space_r_half, .bigs_space_h_half {
    margin-right:  0.75rem !important;
  }
  .bigs_space_neg {
    margin:  -1.5rem !important;
  }
  .bigs_space_t_neg, .bigs_space_v_neg {
    margin-top:  -1.5rem !important;
  }
  .bigs_space_l_neg, .bigs_space_h_neg {
    margin-left:  -1.5rem !important;
  }
  .bigs_space_b_neg, .bigs_space_v_neg {
    margin-bottom:  -1.5rem !important;
  }
  .bigs_space_r_neg, .bigs_space_h_neg {
    margin-right:  -1.5rem !important;
  }
  .bigs_space_2 {
    margin:  3rem !important;
  }
  .bigs_space_t_2, .bigs_space_v_2 {
    margin-top:  3rem !important;
  }
  .bigs_space_l_2, .bigs_space_h_2 {
    margin-left:  3rem !important;
  }
  .bigs_space_b_2, .bigs_space_v_2 {
    margin-bottom:  3rem !important;
  }
  .bigs_space_r_2, .bigs_space_h_2 {
    margin-right:  3rem !important;
  }
  .bigs_pad_0 {
    padding: 0 !important;
  }
  .bigs_pad_t_0, .bigs_pad_v_0 {
    padding-top: 0 !important;
  }
  .bigs_pad_l_0, .bigs_pad_h_0 {
    padding-left: 0 !important;
  }
  .bigs_pad_b_0, .bigs_pad_v_0 {
    padding-bottom: 0 !important;
  }
  .bigs_pad_r_0, .bigs_pad_h_0 {
    padding-right: 0 !important;
  }
  .bigs_pad {
    padding:  1.5rem !important;
  }
  .bigs_pad_t, .bigs_pad_v {
    padding-top:  1.5rem !important;
  }
  .bigs_pad_l, .bigs_pad_h {
    padding-left:  1.5rem !important;
  }
  .bigs_pad_b, .bigs_pad_v {
    padding-bottom:  1.5rem !important;
  }
  .bigs_pad_r, .bigs_pad_h {
    padding-right:  1.5rem !important;
  }
  .bigs_pad_half {
    padding:  0.75rem !important;
  }
  .bigs_pad_t_half, .bigs_pad_v_half {
    padding-top:  0.75rem !important;
  }
  .bigs_pad_l_half, .bigs_pad_h_half {
    padding-left:  0.75rem !important;
  }
  .bigs_pad_b_half, .bigs_pad_v_half {
    padding-bottom:  0.75rem !important;
  }
  .bigs_pad_r_half, .bigs_pad_h_half {
    padding-right:  0.75rem !important;
  }
  .bigs_pad_2 {
    padding:  3rem !important;
  }
  .bigs_pad_t_2, .bigs_pad_v_2 {
    padding-top:  3rem !important;
  }
  .bigs_pad_l_2, .bigs_pad_h_2 {
    padding-left:  3rem !important;
  }
  .bigs_pad_b_2, .bigs_pad_v_2 {
    padding-bottom:  3rem !important;
  }
  .bigs_pad_r_2, .bigs_pad_h_2 {
    padding-right:  3rem !important;
  }
}

@media only screen and (min-width: 941px) {
  .desk_space_0 {
    margin: 0 !important;
  }
  .desk_space_t_0, .desk_space_v_0 {
    margin-top: 0 !important;
  }
  .desk_space_l_0, .desk_space_h_0 {
    margin-left: 0 !important;
  }
  .desk_space_b_0, .desk_space_v_0 {
    margin-bottom: 0 !important;
  }
  .desk_space_r_0, .desk_space_h_0 {
    margin-right: 0 !important;
  }
  .desk_space {
    margin:  1.5rem !important;
  }
  .desk_space_t, .desk_space_v {
    margin-top:  1.5rem !important;
  }
  .desk_space_l, .desk_space_h {
    margin-left:  1.5rem !important;
  }
  .desk_space_b, .desk_space_v {
    margin-bottom:  1.5rem !important;
  }
  .desk_space_r, .desk_space_h {
    margin-right:  1.5rem !important;
  }
  .desk_space_half {
    margin:  0.75rem !important;
  }
  .desk_space_t_half, .desk_space_v_half {
    margin-top:  0.75rem !important;
  }
  .desk_space_l_half, .desk_space_h_half {
    margin-left:  0.75rem !important;
  }
  .desk_space_b_half, .desk_space_v_half {
    margin-bottom:  0.75rem !important;
  }
  .desk_space_r_half, .desk_space_h_half {
    margin-right:  0.75rem !important;
  }
  .desk_space_neg {
    margin:  -1.5rem !important;
  }
  .desk_space_t_neg, .desk_space_v_neg {
    margin-top:  -1.5rem !important;
  }
  .desk_space_l_neg, .desk_space_h_neg {
    margin-left:  -1.5rem !important;
  }
  .desk_space_b_neg, .desk_space_v_neg {
    margin-bottom:  -1.5rem !important;
  }
  .desk_space_r_neg, .desk_space_h_neg {
    margin-right:  -1.5rem !important;
  }
  .desk_space_2 {
    margin:  3rem !important;
  }
  .desk_space_t_2, .desk_space_v_2 {
    margin-top:  3rem !important;
  }
  .desk_space_l_2, .desk_space_h_2 {
    margin-left:  3rem !important;
  }
  .desk_space_b_2, .desk_space_v_2 {
    margin-bottom:  3rem !important;
  }
  .desk_space_r_2, .desk_space_h_2 {
    margin-right:  3rem !important;
  }
  .desk_pad_0 {
    padding: 0 !important;
  }
  .desk_pad_t_0, .desk_pad_v_0 {
    padding-top: 0 !important;
  }
  .desk_pad_l_0, .desk_pad_h_0 {
    padding-left: 0 !important;
  }
  .desk_pad_b_0, .desk_pad_v_0 {
    padding-bottom: 0 !important;
  }
  .desk_pad_r_0, .desk_pad_h_0 {
    padding-right: 0 !important;
  }
  .desk_pad {
    padding:  1.5rem !important;
  }
  .desk_pad_t, .desk_pad_v {
    padding-top:  1.5rem !important;
  }
  .desk_pad_l, .desk_pad_h {
    padding-left:  1.5rem !important;
  }
  .desk_pad_b, .desk_pad_v {
    padding-bottom:  1.5rem !important;
  }
  .desk_pad_r, .desk_pad_h {
    padding-right:  1.5rem !important;
  }
  .desk_pad_half {
    padding:  0.75rem !important;
  }
  .desk_pad_t_half, .desk_pad_v_half {
    padding-top:  0.75rem !important;
  }
  .desk_pad_l_half, .desk_pad_h_half {
    padding-left:  0.75rem !important;
  }
  .desk_pad_b_half, .desk_pad_v_half {
    padding-bottom:  0.75rem !important;
  }
  .desk_pad_r_half, .desk_pad_h_half {
    padding-right:  0.75rem !important;
  }
  .desk_pad_2 {
    padding:  3rem !important;
  }
  .desk_pad_t_2, .desk_pad_v_2 {
    padding-top:  3rem !important;
  }
  .desk_pad_l_2, .desk_pad_h_2 {
    padding-left:  3rem !important;
  }
  .desk_pad_b_2, .desk_pad_v_2 {
    padding-bottom:  3rem !important;
  }
  .desk_pad_r_2, .desk_pad_h_2 {
    padding-right:  3rem !important;
  }
}

.show {
  display: block !important;
}

.il {
  display: inline !important;
}

.ibl {
  display: inline-block !important;
}

.hide {
  display: none !important;
}

@media only screen and (max-width: 640px) {
  .smalls_show {
    display: block !important;
  }
  .smalls_il {
    display: inline !important;
  }
  .smalls_ibl {
    display: inline-block !important;
  }
  .smalls_hide {
    display: none !important;
  }
}

@media only screen and (min-width: 641px) {
  .bigs_show {
    display: block !important;
  }
  .bigs_il {
    display: inline !important;
  }
  .bigs_ibl {
    display: inline-block !important;
  }
  .bigs_hide {
    display: none !important;
  }
}

.txt_normal {
  font-weight: 400  !important;
}

.txt_italic {
  font-style: italic  !important;
}

.txt_bold {
  font-weight: 700  !important;
  -webkit-font-smoothing: antialiased;
}

.txt_upper {
  text-transform: uppercase  !important;
  letter-spacing: 0.1em  !important;
}

.txt_capital {
  text-transform: capitalize  !important;
}

.txt_lower {
  text-transform: none  !important;
  letter-spacing: 0  !important;
}

.txt_small {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
}

.txt_space_reset {
  letter-spacing: normal  !important;
  word-spacing: normal  !important;
}

.txt_primary {
  font-family: "clearsans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
}

.txt_secondary {
  font-family: "Merriweather", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif;
}

@media only screen and (max-width: 640px) {
  .smalls_txt_normal {
    font-weight: 400  !important;
  }
  .smalls_txt_italic {
    font-style: italic  !important;
  }
  .smalls_txt_bold {
    font-weight: 700  !important;
    -webkit-font-smoothing: antialiased;
  }
  .smalls_txt_upper {
    text-transform: uppercase  !important;
    letter-spacing: 0.1em  !important;
  }
  .smalls_txt_capital {
    text-transform: capitalize  !important;
  }
  .smalls_txt_lower {
    text-transform: none  !important;
    letter-spacing: 0  !important;
  }
  .smalls_txt_small {
    font-size: 0.75rem;
    line-height: 2;
  }
  .smalls_txt_space_reset {
    letter-spacing: normal  !important;
    word-spacing: normal  !important;
  }
  .smalls_txt_primary {
    font-family: "clearsans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  }
  .smalls_txt_secondary {
    font-family: "Merriweather", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif;
  }
}

@media only screen and (min-width: 641px) {
  .bigs_txt_normal {
    font-weight: 400  !important;
  }
  .bigs_txt_italic {
    font-style: italic  !important;
  }
  .bigs_txt_bold {
    font-weight: 700  !important;
    -webkit-font-smoothing: antialiased;
  }
  .bigs_txt_upper {
    text-transform: uppercase  !important;
    letter-spacing: 0.1em  !important;
  }
  .bigs_txt_capital {
    text-transform: capitalize  !important;
  }
  .bigs_txt_lower {
    text-transform: none  !important;
    letter-spacing: 0  !important;
  }
  .bigs_txt_small {
    font-size: 0.75rem;
    line-height: 2;
  }
  .bigs_txt_space_reset {
    letter-spacing: normal  !important;
    word-spacing: normal  !important;
  }
  .bigs_txt_primary {
    font-family: "clearsans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  }
  .bigs_txt_secondary {
    font-family: "Merriweather", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif;
  }
}

.baseline-on {
  background-image: url(http://basehold.it/i/24);
  background: -webkit-linear-gradient(bottom, rgba(0, 0, 0, 0.15) 1px, transparent 1px, rgba(0, 0, 0, 0.15) 1px, transparent 1px) top left/auto 0.75em;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.15) 1px, transparent 1px, rgba(0, 0, 0, 0.15) 1px, transparent 1px) top left/auto 0.75em;
}

.baseline-off {
  background-image: none;
}
